// The top-level package for the Hive Actor Plugin System.
package hive:actor@0.1.0;

// =================================================================
// INTERFACE 1: Core Actor Model
// This interface defines the essential types and behaviors required
// to create a stateful, message-driven actors.
// =================================================================
interface actor {
    /// An envelope that wraps every message passed between actors.
    /// It provides context about the message's origin.
    record message-envelope {
        /// The unique identifier of the message type
        message-type: string,
        /// The unique identifier of the actor that sent the message.
        from-actor-id: string,
        /// The scope in which the sending actor was operating.
        from-scope: string,
        /// The raw, serialized message data. The format (e.g., JSON)
        /// is determined by the sending actor's implementation.
        payload: list<u8>,
    }

    /// Represents a stateful actor instance. Actor authors must provide
    /// an implementation for this resource.
    resource actor {
        /// Called by the host once when the actor is first instantiated.
        /// Use this to initialize the actor's state.
        /// @param scope - The execution scope provided by the host.
        /// @param config - The configuration string (TOML format) for this actor.
        constructor(scope: string, config: string);

        /// The primary entry point for processing incoming messages. This
        /// function is called by the host whenever another actor broadcasts
        /// a message to the system.
        /// @param message - The incoming message envelope, containing the
        /// payload and sender's context.
        handle-message: func(message: message-envelope);

        /// Called by the host when the actor instance is being shut down.
        /// Use this for cleanup tasks like persisting state.
        destructor: func();
    }
}

// =================================================================
// CAPABILITY INTERFACES
// Each interface represents a distinct capability that can be 
// optionally provided to actors
// =================================================================

interface messaging {
    /// Broadcasts a message to all other actors in the system
    broadcast: func(message-type: string, payload: list<u8>);
}

interface command {
    variant exit-status {
        exited(u8),
        signaled(u8),
        failed-to-start(string),
        timeout-expired,
    }

    record command-output {
        stdout: list<u8>,
        stderr: list<u8>,
        status: exit-status,
    }

    resource cmd {
        constructor(command: string);
        args: func(args: list<string>) -> cmd;
        current-dir: func(dir: string) -> cmd;
        timeout: func(seconds: u32) -> cmd;
        env: func(key: string, value: string) -> cmd;
        env-clear: func() -> cmd;
        run: func() -> result<command-output, string>;
    }
}

interface http {
    /// Headers as a list of key-value pairs
    record headers {
        headers: list<tuple<string, string>>
    }
    
    /// Possible errors that can occur during HTTP operations
    variant request-error {
        network-error(string),
        timeout,
        invalid-url(string),
        builder-error(string),
    }
    
    /// HTTP response containing status, headers, and body
    record response {
        status: u16,
        headers: headers,
        body: list<u8>,
    }
    
    /// HTTP request builder following a builder pattern similar to reqwest
    resource request {
        /// Create a new HTTP request with the given method and URL
        /// Common methods: GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS
        constructor(method: string, url: string);
        
        /// Add a single header to the request
        header: func(key: string, value: string) -> request;
        
        /// Add multiple headers to the request
        headers: func(headers: headers) -> request;
        
        /// Set the request body
        body: func(body: list<u8>) -> request;
        
        /// Set request timeout in seconds
        timeout: func(seconds: u32) -> request;
        
        /// Execute the request and return the response
        send: func() -> result<response, request-error>;
    }
}

// =================================================================
// WORLD: Definition
// This world assembles the required imports and exports to define
// a complete, runnable Hive Actor.
// =================================================================
world actor-world {
    import messaging;
    import command;
    import http;

    // An actor must provide an implementation of the `actor` resource.
    export actor;
}

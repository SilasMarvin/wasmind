# Docker Sandbox for Safe LLM Testing
# This container provides a minimal, safe environment for testing
# hive's tool execution without risking the host system

FROM rust:1.86 as builder

# Install dependencies for building
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy source code (excluding target/ via .dockerignore)
WORKDIR /build
COPY . .

# Build hive binary with headless features only
RUN cargo build --release --no-default-features --features headless

# Create the runtime image
FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install minimal tools that the LLM might need for testing
RUN apt-get update && apt-get install -y \
    # Basic shell tools (coreutils includes: cat, head, tail, wc, sort, uniq, cut, mkdir, touch, cp, mv, rm, chmod)
    bash \
    coreutils \
    findutils \
    grep \
    sed \
    gawk \
    file \
    # Text editing and processing
    nano \
    vim-tiny \
    # Development tools
    git \
    curl \
    wget \
    # Python for scripting tests
    python3 \
    python3-pip \
    # Node.js for JS-based tests
    nodejs \
    npm \
    # Process management (procps includes: ps, top, kill)
    procps \
    # Network tools (limited)
    iputils-ping \
    # Clean up
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user for running tests
RUN useradd -m -s /bin/bash testuser && \
    mkdir -p /workspace && \
    chown testuser:testuser /workspace

# Create test data directories
RUN mkdir -p /workspace/test-files \
    /workspace/projects \
    /workspace/temp \
    /workspace/output && \
    chown -R testuser:testuser /workspace

# Copy some sample test files
COPY tests/docker/test-data/ /workspace/test-files/

# Copy validation script
COPY tests/docker/validate-tests.py /workspace/validate-tests.py

# Copy hive binary from builder stage
COPY --from=builder /build/target/release/hive /usr/local/bin/hive

# Fix ownership and permissions
RUN chown -R testuser:testuser /workspace && \
    chmod +x /workspace/validate-tests.py && \
    chmod +x /usr/local/bin/hive

# Set up Python environment
RUN pip3 install pytest requests

# Switch to non-root user
USER testuser
WORKDIR /workspace

# Create sample project structure
RUN mkdir -p projects/sample-project/src && \
    mkdir -p projects/sample-project/tests && \
    mkdir -p projects/sample-project/docs && \
    echo "# Sample Project" > projects/sample-project/README.md && \
    echo "print('Hello from Python')" > projects/sample-project/src/main.py && \
    echo "# Test file" > projects/sample-project/tests/test_main.py && \
    echo "# Documentation" > projects/sample-project/docs/api.md

# Create some test data files
RUN echo "Configuration settings go here" > test-files/config.txt && \
    echo "Log entry 1\nLog entry 2\nError: Something failed" > test-files/app.log && \
    echo "TODO: Implement feature A\nTODO: Fix bug B" > test-files/todo.txt && \
    echo '{"name": "test", "version": "1.0"}' > test-files/package.json

# Set resource limits to prevent runaway processes
# These will be enforced by Docker runtime limits
RUN echo "ulimit -c 0" >> ~/.bashrc && \
    echo "ulimit -f 100000" >> ~/.bashrc && \
    echo "ulimit -t 60" >> ~/.bashrc

# Set the default working directory
WORKDIR /workspace

# Default command runs validation
CMD ["/workspace/validate-tests.py"]

# Expose port for potential web-based testing
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python3 /workspace/validate-tests.py || exit 1

# Set environment variables for testing
ENV TESTING_MODE=1
ENV SANDBOX_ENV=1
ENV USER=testuser
ENV HOME=/home/testuser
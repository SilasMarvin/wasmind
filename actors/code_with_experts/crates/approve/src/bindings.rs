// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod hive {
    pub mod actor {
        /// =================================================================
        /// CAPABILITY INTERFACES
        /// Each interface represents a distinct capability that can be
        /// optionally provided to actors
        /// =================================================================
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod messaging {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            /// Broadcasts a message to all other actors in the system
            pub fn broadcast(message_type: &str, payload: &[u8]) -> () {
                unsafe {
                    let vec0 = message_type;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = payload;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "hive:actor/messaging@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "broadcast"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1) };
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod logger {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// Log levels for structured logging
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum LogLevel {
                Debug,
                Info,
                Warn,
                Error,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Debug,
                        1 => LogLevel::Info,
                        2 => LogLevel::Warn,
                        3 => LogLevel::Error,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Log a message at the specified level
            pub fn log(level: LogLevel, message: &str) -> () {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "hive:actor/logger@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "log"]
                        fn wit_import1(_: i32, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(level.clone() as i32, ptr0.cast_mut(), len0) };
                }
            }
        }
        /// =================================================================
        /// INTERFACE 1: Core Actor Model
        /// This interface defines the essential types and behaviors required
        /// to create a stateful, message-driven actors.
        /// =================================================================
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod actor {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// A scope identifier - a 6-character alphanumeric string used to identify agent contexts
            pub type Scope = _rt::String;
            /// An envelope that wraps every message passed between actors.
            /// It provides context about the message's origin.
            #[derive(Clone)]
            pub struct MessageEnvelope {
                /// Correlation ID for tracing related operations (format: "parent:child")
                pub id: _rt::String,
                /// The unique identifier of the message type
                pub message_type: _rt::String,
                /// The unique identifier of the actor that sent the message.
                pub from_actor_id: _rt::String,
                /// The scope in which the sending actor was operating.
                pub from_scope: Scope,
                /// The raw, serialized message data. The format (e.g., JSON)
                /// is determined by the sending actor's implementation.
                pub payload: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for MessageEnvelope {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("MessageEnvelope")
                        .field("id", &self.id)
                        .field("message-type", &self.message_type)
                        .field("from-actor-id", &self.from_actor_id)
                        .field("from-scope", &self.from_scope)
                        .field("payload", &self.payload)
                        .finish()
                }
            }
            /// Represents a stateful actor instance. Actor authors must provide
            /// an implementation for this resource.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Actor {
                handle: _rt::Resource<Actor>,
            }
            impl Actor {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Actor {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "hive:actor/actor@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]actor"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Actor {
                #[allow(unused_unsafe, clippy::all)]
                /// Called by the host once when the actor is first instantiated.
                /// Use this to initialize the actor's state.
                /// @param scope - The execution scope provided by the host.
                /// @param config - The configuration string (TOML format) for this actor.
                pub fn new(scope: &str, config: &str) -> Self {
                    unsafe {
                        let vec0 = scope;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = config;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "hive:actor/actor@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]actor"]
                            fn wit_import2(
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import2(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1)
                        };
                        unsafe { Actor::from_handle(ret as u32) }
                    }
                }
            }
            impl Actor {
                #[allow(unused_unsafe, clippy::all)]
                /// The primary entry point for processing incoming messages. This
                /// function is called by the host whenever another actor broadcasts
                /// a message to the system.
                /// @param message - The incoming message envelope, containing the
                /// payload and sender's context.
                pub fn handle_message(&self, message: &MessageEnvelope) -> () {
                    unsafe {
                        let MessageEnvelope {
                            id: id0,
                            message_type: message_type0,
                            from_actor_id: from_actor_id0,
                            from_scope: from_scope0,
                            payload: payload0,
                        } = message;
                        let vec1 = id0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = message_type0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec3 = from_actor_id0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let vec4 = from_scope0;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        let vec5 = payload0;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "hive:actor/actor@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]actor.handle-message"]
                            fn wit_import6(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import6(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import6(
                                (self).handle() as i32,
                                ptr1.cast_mut(),
                                len1,
                                ptr2.cast_mut(),
                                len2,
                                ptr3.cast_mut(),
                                len3,
                                ptr4.cast_mut(),
                                len4,
                                ptr5.cast_mut(),
                                len5,
                            )
                        };
                    }
                }
            }
            impl Actor {
                #[allow(unused_unsafe, clippy::all)]
                /// Called by the host when the actor instance is being shut down.
                /// Use this for cleanup tasks like persisting state.
                pub fn destructor(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "hive:actor/actor@0.1.0")]
                        unsafe extern "C" {
                            #[link_name = "[method]actor.destructor"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod agent {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Scope = super::super::super::hive::actor::actor::Scope;
            #[allow(unused_unsafe, clippy::all)]
            /// Spawn a new agent with the specified actors
            /// Returns the scope ID of the newly created agent
            pub fn spawn_agent(
                actor_ids: &[_rt::String],
                agent_name: &str,
            ) -> Result<Scope, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec1 = actor_ids;
                    let len1 = vec1.len();
                    let layout1 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec1.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result1 = if layout1.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout1);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec1.into_iter().enumerate() {
                        let base = result1
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len0;
                            *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                        }
                    }
                    let vec2 = agent_name;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "hive:actor/agent@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "spawn-agent"]
                        fn wit_import4(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import4(result1, len1, ptr2.cast_mut(), len2, ptr3) };
                    let l5 = i32::from(*ptr3.add(0).cast::<u8>());
                    let result12 = match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr3
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l7 = *ptr3
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr3
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l10 = *ptr3
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout1.size() != 0 {
                        _rt::alloc::dealloc(result1.cast(), layout1);
                    }
                    result12
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the parent scope of the current actor
            /// Returns None if this is a root agent, Some(scope_id) if it has a parent
            pub fn get_parent_scope() -> Option<Scope> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "hive:actor/agent@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "get-parent-scope"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                    let result6 = match l2 {
                        0 => None,
                        1 => {
                            let e = {
                                let l3 = *ptr0
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l4 = *ptr0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                _rt::string_lift(bytes5)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the parent scope of the specified scope
            /// Returns None if the scope has no parent or if the scope is invalid
            pub fn get_parent_scope_of(scope: &str) -> Option<Scope> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = scope;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "hive:actor/agent@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "get-parent-scope-of"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result7 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *ptr1
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                _rt::string_lift(bytes6)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result7
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod hive {
        pub mod actor {
            /// =================================================================
            /// INTERFACE 1: Core Actor Model
            /// This interface defines the essential types and behaviors required
            /// to create a stateful, message-driven actors.
            /// =================================================================
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod actor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// A scope identifier - a 6-character alphanumeric string used to identify agent contexts
                pub type Scope = _rt::String;
                /// An envelope that wraps every message passed between actors.
                /// It provides context about the message's origin.
                #[derive(Clone)]
                pub struct MessageEnvelope {
                    /// Correlation ID for tracing related operations (format: "parent:child")
                    pub id: _rt::String,
                    /// The unique identifier of the message type
                    pub message_type: _rt::String,
                    /// The unique identifier of the actor that sent the message.
                    pub from_actor_id: _rt::String,
                    /// The scope in which the sending actor was operating.
                    pub from_scope: Scope,
                    /// The raw, serialized message data. The format (e.g., JSON)
                    /// is determined by the sending actor's implementation.
                    pub payload: _rt::Vec<u8>,
                }
                impl ::core::fmt::Debug for MessageEnvelope {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("MessageEnvelope")
                            .field("id", &self.id)
                            .field("message-type", &self.message_type)
                            .field("from-actor-id", &self.from_actor_id)
                            .field("from-scope", &self.from_scope)
                            .field("payload", &self.payload)
                            .finish()
                    }
                }
                /// Represents a stateful actor instance. Actor authors must provide
                /// an implementation for this resource.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Actor {
                    handle: _rt::Resource<Actor>,
                }
                type _ActorRep<T> = Option<T>;
                impl Actor {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Actor`.
                    pub fn new<T: GuestActor>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ActorRep<T> = Some(val);
                        let ptr: *mut _ActorRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestActor>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestActor>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestActor>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _ActorRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestActor>(&self) -> *mut _ActorRep<T> {
                        Actor::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Actor`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ActorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Actor>,
                }
                impl<'a> ActorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestActor>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ActorRep<T> {
                        Actor::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Actor {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]hive:actor/actor@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]actor"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_actor_cabi<T: GuestActor>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = Actor::new(
                        T::new(_rt::string_lift(bytes0), _rt::string_lift(bytes1)),
                    );
                    (result2).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_actor_handle_message_cabi<T: GuestActor>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: *mut u8,
                    arg8: usize,
                    arg9: *mut u8,
                    arg10: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    let len2 = arg6;
                    let bytes2 = _rt::Vec::from_raw_parts(arg5.cast(), len2, len2);
                    let len3 = arg8;
                    let bytes3 = _rt::Vec::from_raw_parts(arg7.cast(), len3, len3);
                    let len4 = arg10;
                    T::handle_message(
                        unsafe { ActorBorrow::lift(arg0 as u32 as usize) }.get(),
                        MessageEnvelope {
                            id: _rt::string_lift(bytes0),
                            message_type: _rt::string_lift(bytes1),
                            from_actor_id: _rt::string_lift(bytes2),
                            from_scope: _rt::string_lift(bytes3),
                            payload: _rt::Vec::from_raw_parts(arg9.cast(), len4, len4),
                        },
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_actor_destructor_cabi<T: GuestActor>(
                    arg0: *mut u8,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::destructor(
                        unsafe { ActorBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                }
                pub trait Guest {
                    type Actor: GuestActor;
                }
                pub trait GuestActor: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]hive:actor/actor@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]actor"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]hive:actor/actor@0.1.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]actor"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Called by the host once when the actor is first instantiated.
                    /// Use this to initialize the actor's state.
                    /// @param scope - The execution scope provided by the host.
                    /// @param config - The configuration string (TOML format) for this actor.
                    fn new(scope: Scope, config: _rt::String) -> Self;
                    /// The primary entry point for processing incoming messages. This
                    /// function is called by the host whenever another actor broadcasts
                    /// a message to the system.
                    /// @param message - The incoming message envelope, containing the
                    /// payload and sender's context.
                    fn handle_message(&self, message: MessageEnvelope) -> ();
                    /// Called by the host when the actor instance is being shut down.
                    /// Use this for cleanup tasks like persisting state.
                    fn destructor(&self) -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_hive_actor_actor_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "hive:actor/actor@0.1.0#[constructor]actor")] unsafe extern "C"
                        fn export_constructor_actor(arg0 : * mut u8, arg1 : usize, arg2 :
                        * mut u8, arg3 : usize,) -> i32 { unsafe { $($path_to_types)*::
                        _export_constructor_actor_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Actor > (arg0, arg1, arg2, arg3) } } #[unsafe
                        (export_name =
                        "hive:actor/actor@0.1.0#[method]actor.handle-message")] unsafe
                        extern "C" fn export_method_actor_handle_message(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize, arg3 : * mut u8, arg4 : usize,
                        arg5 : * mut u8, arg6 : usize, arg7 : * mut u8, arg8 : usize,
                        arg9 : * mut u8, arg10 : usize,) { unsafe { $($path_to_types)*::
                        _export_method_actor_handle_message_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Actor > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7, arg8, arg9, arg10) } } #[unsafe
                        (export_name =
                        "hive:actor/actor@0.1.0#[method]actor.destructor")] unsafe extern
                        "C" fn export_method_actor_destructor(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*::
                        _export_method_actor_destructor_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Actor > (arg0) } } const _ : () = {
                        #[doc(hidden)] #[unsafe (export_name =
                        "hive:actor/actor@0.1.0#[dtor]actor")] #[allow(non_snake_case)]
                        unsafe extern "C" fn dtor(rep : * mut u8) { unsafe {
                        $($path_to_types)*:: Actor::dtor::< <$ty as $($path_to_types)*::
                        Guest >::Actor > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_hive_actor_actor_0_1_0_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_actor_world_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::hive::actor::actor::__export_hive_actor_actor_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::hive::actor::actor);
    };
}
#[doc(inline)]
pub(crate) use __export_actor_world_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:approve:actor@0.1.0:actor-world:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1079] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb5\x07\x01A\x02\x01\
A\x0b\x01B\x03\x01p}\x01@\x02\x0cmessage-types\x07payload\0\x01\0\x04\0\x09broad\
cast\x01\x01\x03\0\x1ahive:actor/messaging@0.1.0\x05\0\x01B\x04\x01m\x04\x05debu\
g\x04info\x04warn\x05error\x04\0\x09log-level\x03\0\0\x01@\x02\x05level\x01\x07m\
essages\x01\0\x04\0\x03log\x01\x02\x03\0\x17hive:actor/logger@0.1.0\x05\x01\x01B\
\x0e\x01s\x04\0\x05scope\x03\0\0\x01p}\x01r\x05\x02ids\x0cmessage-types\x0dfrom-\
actor-ids\x0afrom-scope\x01\x07payload\x02\x04\0\x10message-envelope\x03\0\x03\x04\
\0\x05actor\x03\x01\x01i\x05\x01@\x02\x05scope\x01\x06configs\0\x06\x04\0\x12[co\
nstructor]actor\x01\x07\x01h\x05\x01@\x02\x04self\x08\x07message\x04\x01\0\x04\0\
\x1c[method]actor.handle-message\x01\x09\x01@\x01\x04self\x08\x01\0\x04\0\x18[me\
thod]actor.destructor\x01\x0a\x03\0\x16hive:actor/actor@0.1.0\x05\x02\x02\x03\0\x02\
\x05scope\x01B\x0b\x02\x03\x02\x01\x03\x04\0\x05scope\x03\0\0\x01ps\x01j\x01\x01\
\x01s\x01@\x02\x09actor-ids\x02\x0aagent-names\0\x03\x04\0\x0bspawn-agent\x01\x04\
\x01k\x01\x01@\0\0\x05\x04\0\x10get-parent-scope\x01\x06\x01@\x01\x05scope\x01\0\
\x05\x04\0\x13get-parent-scope-of\x01\x07\x03\0\x16hive:actor/agent@0.1.0\x05\x04\
\x01B\x0e\x01s\x04\0\x05scope\x03\0\0\x01p}\x01r\x05\x02ids\x0cmessage-types\x0d\
from-actor-ids\x0afrom-scope\x01\x07payload\x02\x04\0\x10message-envelope\x03\0\x03\
\x04\0\x05actor\x03\x01\x01i\x05\x01@\x02\x05scope\x01\x06configs\0\x06\x04\0\x12\
[constructor]actor\x01\x07\x01h\x05\x01@\x02\x04self\x08\x07message\x04\x01\0\x04\
\0\x1c[method]actor.handle-message\x01\x09\x01@\x01\x04self\x08\x01\0\x04\0\x18[\
method]actor.destructor\x01\x0a\x04\0\x16hive:actor/actor@0.1.0\x05\x05\x04\0\x1f\
approve:actor/actor-world@0.1.0\x04\0\x0b\x11\x01\0\x0bactor-world\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rus\
t\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
